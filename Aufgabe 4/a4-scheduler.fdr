nametype Id = {0..3} --Dummytask = 0
nametype Timeslots = {1..10}
nametype Task_State = {"idle", "eager", "active", "waiting"}
channel set_idle, set_waiting, set_active: Id
channel start_task
channel request, push, pop: Id.Timeslots
channel clock



FIFO(<>) = push?d -> FIFO(<d>)
			
FIFO(<h>^t) = 
	pop!h -> FIFO(t)
	[]
	push?d -> FIFO(<h>^t^<d>)

	-- if count(s) < 2 then push nach d -> Merge d,h,s


--ZustÃ¤nde der prozesse: 
	--idle(will nichts tun),
	--eager(will, ist aber nicht in wait list),
	--waiting(wartet auf scheduler),
	--active(tut etwas)

TASK(id, time, state) = (state == "idle") & start_task -> TASK(id,time,"eager")
						[]
						(state == "eager") & request!id.time -> set_waiting.id -> TASK(id,time,"waiting")
						[]
						(state == "active") & set_idle.id -> TASK(id,time,"idle")               -- Abarbeitung des Tasks in Task oder Scheduler
						[]
						(state == "waiting") & (set_active.id -> TASK(id,time,"active"))




-- FIFO Scheduler
 

SCHED(activeTask,remainingTime,queueCounter) =
	(request?taskId.taskTime -> push.taskId.taskTime -> set_waiting.taskId -> SCHED(activeTask,remainingTime, queueCounter +1))
		[]
 	(clock -> 
 		(
	 		((remainingTime > 1) & SCHED(activeTask, remainingTime - 1, queueCounter))
	 								[]
	 		((activeTask!=0) & (remainingTime == 1) & set_idle.activeTask -> 
	 												(((queueCounter > 0) & pop?newTask.newTime -> set_active.newTask -> SCHED(newTask,newTime,queueCounter -1))
																		 []	
													((queueCounter == 0) & SCHED(0,0,queueCounter)))
	 		)
	 								[]
	 		((activeTask == 0) & ((queueCounter > 0) & pop?newTask.newTime -> set_active.newTask -> SCHED(newTask,newTime,queueCounter-1)
										[]
								 ((queueCounter == 0) & SCHED(activeTask,remainingTime,queueCounter)))
			)
		)
	)	
		        


--Timer
CLOCK = clock -> CLOCK

-- comment



-- Task 1: 3, Task 2: 5, Task 3: 6
-- Start Task: idle --> eager
-- Momentan starten alle Tasks gleichzeitig, einfach durch ein gesynctes Start Task, TASKS laufen im Kreis


SYS2 =  FIFO(<1.3,2.5,3.6>) 
--START_TASK -> start_task -> STOP
TASKS = ((TASK(1,3,"idle") [|{|start_task|}|] TASK(2,5,"idle")) [|{|start_task|}|] TASK(3,6,"idle"))
SYS = (FIFO(<>) [|{|push,pop|}|] (SCHED(0,0,0) [|{|clock|}|] CLOCK)) [|{|set_idle, set_waiting, set_active,request|}|] TASKS

FIFOTEST = push!1.1 -> push!2.2 -> pop.1.1 -> pop.2.2 -> STOP
FIFOTESTSYS = FIFOTEST [|{|push,pop|}|] FIFO(<>)

assert FIFOTEST [T= FIFO(<>)
assert FIFO(<>) [T= FIFOTEST