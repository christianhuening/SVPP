max = 3
nametype Data = {1..2}
channel push, pop: Data
STACK1 = push?d -> pop!d -> STACK1

STACK3(<>) = push?d -> STACK3(<d>)
STACK3(<h>^s) = 
	pop!h -> STACK3(s)
	[]
	(#s < (max-1)) & push?d -> STACK3(<d>^<h>^s)
	-- if count(s) < 2 then push nach d -> Merge d,h,s
 

assert STACK1 [T= STACK3(<>) -- false, kann mehr als STACK1, da der STACK3 bis zum Rand aufgefüllt werden kann und dieses erkannt wird.
							 -- STACK1 pusht und pop'd nur

assert STACK3(<>) [T= STACK1 -- true, STACK3 bildet das einfache push-pop wechselspiel über die Alternativ-Klausel ab.

assert STACK1 [F= STACK3(<>) -- false, STACK3 kann Fehler erzeugen, die STACK1 nicht kann, da STACK3 auch mehrfach pushen kann, bis der STACK voll ist

assert STACK3(<>) [F= STACK1 -- false, da STACK1 nach einem PUSH zwingend ein POP erwartet, STACK3 aber problemlos noch weiter pushen kann